
package cn.wechat.oa.wx;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.NoSuchAlgorithmException;

import net.sf.json.JSONObject;
/**
 * @author kylin
 * @description:
 * @date 2017-5-4
 */
public class wxUtils {

	public static final String APPID = "wxfa3a9b073610d662";
	public static final String SECRET = "1cbad13f643b4305918a86fe1b1a9980";

	public static final String codeGetsecret_key = "https://api.weixin.qq.com/sns/jscode2session?appid=APPID&secret=SECRET&js_code=JSCODE&grant_type=authorization_code";

	
//	public static String EncoderByMd5(String str) throws NoSuchAlgorithmException, UnsupportedEncodingException {
//		MessageDigest md5 = MessageDigest.getInstance("MD5");
//		BASE64Encoder base64en = new BASE64Encoder();
//		byte[] bt= md5.digest(str.getBytes("utf-8"));
//		String newstr = base64en.encode(bt);
//		return newstr;
//	}

	public static boolean checkPassword(String newpassword, String oldPassword)
			throws NoSuchAlgorithmException, UnsupportedEncodingException {
		if (newpassword.equals(oldPassword)) {
			return true;
		} else {
			return false;
		}
	}

	public static String replaces(String APPID, String SECRET) {
		String url = "https://api.weixin.qq.com/sns/jscode2session?appid=" + APPID + "&secret=" + SECRET
				+ "&js_code=JSCODE&grant_type=authorization_code";
		System.out.println("url = " + url);
		return url;
	}

	public static JSONObject HttpRequest(String request, String RequestMethod, String output) {
		JSONObject jsonObject = null;
		StringBuffer buffer = new StringBuffer();
		try {
		
			URL url = new URL(request);
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setDoOutput(true);
			connection.setDoInput(true);
			connection.setUseCaches(false);
			connection.setRequestMethod(RequestMethod);
			if (output != null) {
				OutputStream out = connection.getOutputStream();
				out.write(output.getBytes("UTF-8"));
				out.close();
			}
	
			InputStream input = connection.getInputStream();
			InputStreamReader inputReader = new InputStreamReader(input, "UTF-8");
			BufferedReader reader = new BufferedReader(inputReader);
			String line;
			while ((line = reader.readLine()) != null) {
				buffer.append(line);
			}
		
			reader.close();
			inputReader.close();
			input.close();
			input = null;
			connection.disconnect();

		} catch (Exception e) {
		}
		return jsonObject;
	}

	public static AccessToken getAccessToken(String corpID, String secret) {
		AccessToken accessToken = null;

		String requestUrl = codeGetsecret_key.replace("APPID", APPID).replace("SECRET", SECRET);
		JSONObject jsonObject = HttpRequest(requestUrl, "GET", null);
	
		if (null != jsonObject) {
			try {
				accessToken = new AccessToken();
				accessToken.setToken(jsonObject.getString("access_token"));
				accessToken.setExpiresIn(jsonObject.getInt("expires_in"));
	
			} catch (Exception e) {
				accessToken = null;
		
			}
		}
		return accessToken;
	}

	public static String URLEncoder(String str) {
		String result = str;
		try {
			result = java.net.URLEncoder.encode(result, "UTF-8");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

}
